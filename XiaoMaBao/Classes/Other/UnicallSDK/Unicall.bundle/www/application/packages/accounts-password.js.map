{"version":3,"sources":["meteor://ðŸ’»app/password_client.js"],"names":[],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} user\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n */\nMeteor.loginWithPassword = function (selector, password, callback) {\n  if (typeof selector === 'string')\n    if (selector.indexOf('@') === -1)\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: function (error, result) {\n      if (error && error.error === 400 &&\n          error.reason === 'old password format') {\n        // The \"reason\" string should match the error thrown in the\n        // password login handler in password_server.js.\n\n        // XXX COMPAT WITH 0.8.1.3\n        // If this user's last login was with a previous version of\n        // Meteor that used SRP, then the server throws this error to\n        // indicate that we should try again. The error includes the\n        // user's SRP identity. We provide a value derived from the\n        // identity and the password to prove to the server that we know\n        // the password without requiring a full SRP flow, as well as\n        // SHA256(password), which the server bcrypts and stores in\n        // place of the old SRP information for this user.\n        srpUpgradePath({\n          upgradeError: error,\n          userSelector: selector,\n          plaintextPassword: password\n        }, callback);\n      }\n      else if (error) {\n        callback && callback(error);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = function (password) {\n  return {\n    digest: SHA256(password),\n    algorithm: \"sha-256\"\n  };\n};\n\n// XXX COMPAT WITH 0.8.1.3\n// The server requested an upgrade from the old SRP password format,\n// so supply the needed SRP identity to login. Options:\n//   - upgradeError: the error object that the server returned to tell\n//     us to upgrade from SRP to bcrypt.\n//   - userSelector: selector to retrieve the user object\n//   - plaintextPassword: the password as a string\nvar srpUpgradePath = function (options, callback) {\n  var details;\n  try {\n    details = EJSON.parse(options.upgradeError.details);\n  } catch (e) {}\n  if (!(details && details.format === 'srp')) {\n    callback && callback(\n      new Meteor.Error(400, \"Password is old. Please reset your \" +\n                       \"password.\"));\n  } else {\n    Accounts.callLoginMethod({\n      methodArguments: [{\n        user: options.userSelector,\n        srp: SHA256(details.identity + \":\" + options.plaintextPassword),\n        password: Accounts._hashPassword(options.plaintextPassword)\n      }],\n      userCallback: callback\n    });\n  }\n};\n\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options); // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\n  if (!Meteor.user()) {\n    callback && callback(new Error(\"Must be logged in to change password.\"));\n    return;\n  }\n\n  check(newPassword, String);\n  if (!newPassword) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    function (error, result) {\n      if (error || !result) {\n        if (error && error.error === 400 &&\n            error.reason === 'old password format') {\n          // XXX COMPAT WITH 0.8.1.3\n          // The server is telling us to upgrade from SRP to bcrypt, as\n          // in Meteor.loginWithPassword.\n          srpUpgradePath({\n            upgradeError: error,\n            userSelector: { id: Meteor.userId() },\n            plaintextPassword: oldPassword\n          }, function (err) {\n            if (err) {\n              callback && callback(err);\n            } else {\n              // Now that we've successfully migrated from srp to\n              // bcrypt, try changing the password again.\n              Accounts.changePassword(oldPassword, newPassword, callback);\n            }\n          });\n        } else {\n          // A normal error, not an error telling us to upgrade to bcrypt\n          callback && callback(\n            error || new Error(\"No result from changePassword.\"));\n        }\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.forgotPassword = function(options, callback) {\n  if (!options.email)\n    throw new Error(\"Must pass options.email\");\n  Accounts.connection.call(\"forgotPassword\", options, callback);\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.resetPassword = function(token, newPassword, callback) {\n  check(token, String);\n  check(newPassword, String);\n\n  if (!newPassword) {\n    callback(new Meteor.Error(400, \"Password may not be empty\"));\n    return;\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n */\nAccounts.verifyEmail = function(token, callback) {\n  if (!token)\n    throw new Error(\"Need to pass token\");\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]}