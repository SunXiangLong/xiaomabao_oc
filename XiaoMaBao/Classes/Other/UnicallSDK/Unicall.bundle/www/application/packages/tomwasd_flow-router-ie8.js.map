{"version":3,"sources":["meteor://ðŸ’»app/packages/tomwasd_flow-router-ie8/packages/tomwasd_flow-router-ie8.js"],"names":[],"mappingsfile":"/packages/tomwasd_flow-router-ie8.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/tomwasd:flow-router-ie8/polyfills.js                                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// Events polyfill                                                                                           // 1\n// Reference: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener                  // 2\n// Window.prototype.addEventListener and Window.prototype.removeEVentListener changed to:                    // 3\n// Window.constructor.prototype.addEventListener and Window.constructor.prototype.removeEventListener        // 4\n// due to error in IE8                                                                                       // 5\n(function() {                                                                                                // 6\n  if (!Event.prototype.preventDefault) {                                                                     // 7\n    Event.prototype.preventDefault=function() {                                                              // 8\n      this.returnValue=false;                                                                                // 9\n    };                                                                                                       // 10\n  }                                                                                                          // 11\n  if (!Event.prototype.stopPropagation) {                                                                    // 12\n    Event.prototype.stopPropagation=function() {                                                             // 13\n      this.cancelBubble=true;                                                                                // 14\n    };                                                                                                       // 15\n  }                                                                                                          // 16\n  if (!Element.prototype.addEventListener) {                                                                 // 17\n    var eventListeners=[];                                                                                   // 18\n                                                                                                             // 19\n    var addEventListener=function(type,listener /*, useCapture (will be ignored) */) {                       // 20\n      var self=this;                                                                                         // 21\n      var wrapper=function(e) {                                                                              // 22\n        e.target=e.srcElement;                                                                               // 23\n        e.currentTarget=self;                                                                                // 24\n        if (listener.handleEvent) {                                                                          // 25\n          listener.handleEvent(e);                                                                           // 26\n        } else {                                                                                             // 27\n          listener.call(self,e);                                                                             // 28\n        }                                                                                                    // 29\n      };                                                                                                     // 30\n      if (type==\"DOMContentLoaded\") {                                                                        // 31\n        var wrapper2=function(e) {                                                                           // 32\n          if (document.readyState==\"complete\") {                                                             // 33\n            wrapper(e);                                                                                      // 34\n          }                                                                                                  // 35\n        };                                                                                                   // 36\n        document.attachEvent(\"onreadystatechange\",wrapper2);                                                 // 37\n        eventListeners.push({object:this,type:type,listener:listener,wrapper:wrapper2});                     // 38\n                                                                                                             // 39\n        if (document.readyState==\"complete\") {                                                               // 40\n          var e=new Event();                                                                                 // 41\n          e.srcElement=window;                                                                               // 42\n          wrapper2(e);                                                                                       // 43\n        }                                                                                                    // 44\n      } else {                                                                                               // 45\n        this.attachEvent(\"on\"+type,wrapper);                                                                 // 46\n        eventListeners.push({object:this,type:type,listener:listener,wrapper:wrapper});                      // 47\n      }                                                                                                      // 48\n    };                                                                                                       // 49\n    var removeEventListener=function(type,listener /*, useCapture (will be ignored) */) {                    // 50\n      var counter=0;                                                                                         // 51\n      while (counter<eventListeners.length) {                                                                // 52\n        var eventListener=eventListeners[counter];                                                           // 53\n        if (eventListener.object==this && eventListener.type==type && eventListener.listener==listener) {    // 54\n          if (type==\"DOMContentLoaded\") {                                                                    // 55\n            this.detachEvent(\"onreadystatechange\",eventListener.wrapper);                                    // 56\n          } else {                                                                                           // 57\n            this.detachEvent(\"on\"+type,eventListener.wrapper);                                               // 58\n          }                                                                                                  // 59\n          eventListeners.splice(counter, 1);                                                                 // 60\n          break;                                                                                             // 61\n        }                                                                                                    // 62\n        ++counter;                                                                                           // 63\n      }                                                                                                      // 64\n    };                                                                                                       // 65\n    Element.prototype.addEventListener=addEventListener;                                                     // 66\n    Element.prototype.removeEventListener=removeEventListener;                                               // 67\n    if (HTMLDocument) {                                                                                      // 68\n      HTMLDocument.prototype.addEventListener=addEventListener;                                              // 69\n      HTMLDocument.prototype.removeEventListener=removeEventListener;                                        // 70\n    }                                                                                                        // 71\n    if (Window) {                                                                                            // 72\n      Window.constructor.prototype.addEventListener=addEventListener;                                        // 73\n      Window.constructor.prototype.removeEventListener=removeEventListener;                                  // 74\n    }                                                                                                        // 75\n  }                                                                                                          // 76\n})();                                                                                                        // 77\n                                                                                                             // 78\n// forEach polyfill                                                                                          // 79\n// Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach // 80\n                                                                                                             // 81\nif (!Array.prototype.forEach) {                                                                              // 82\n                                                                                                             // 83\n  Array.prototype.forEach = function(callback, thisArg) {                                                    // 84\n                                                                                                             // 85\n    var T, k;                                                                                                // 86\n                                                                                                             // 87\n    if (this == null) {                                                                                      // 88\n      throw new TypeError(' this is null or not defined');                                                   // 89\n    }                                                                                                        // 90\n                                                                                                             // 91\n    // 1. Let O be the result of calling ToObject passing the |this| value as the argument.                  // 92\n    var O = Object(this);                                                                                    // 93\n                                                                                                             // 94\n    // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".     // 95\n    // 3. Let len be ToUint32(lenValue).                                                                     // 96\n    var len = O.length >>> 0;                                                                                // 97\n                                                                                                             // 98\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.                                     // 99\n    // See: http://es5.github.com/#x9.11                                                                     // 100\n    if (typeof callback !== \"function\") {                                                                    // 101\n      throw new TypeError(callback + ' is not a function');                                                  // 102\n    }                                                                                                        // 103\n                                                                                                             // 104\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.                                // 105\n    if (arguments.length > 1) {                                                                              // 106\n      T = thisArg;                                                                                           // 107\n    }                                                                                                        // 108\n                                                                                                             // 109\n    // 6. Let k be 0                                                                                         // 110\n    k = 0;                                                                                                   // 111\n                                                                                                             // 112\n    // 7. Repeat, while k < len                                                                              // 113\n    while (k < len) {                                                                                        // 114\n                                                                                                             // 115\n      var kValue;                                                                                            // 116\n                                                                                                             // 117\n      // a. Let Pk be ToString(k).                                                                           // 118\n      //   This is implicit for LHS operands of the in operator                                              // 119\n      // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.     // 120\n      //   This step can be combined with c                                                                  // 121\n      // c. If kPresent is true, then                                                                        // 122\n      if (k in O) {                                                                                          // 123\n                                                                                                             // 124\n        // i. Let kValue be the result of calling the Get internal method of O with argument Pk.             // 125\n        kValue = O[k];                                                                                       // 126\n                                                                                                             // 127\n        // ii. Call the Call internal method of callback with T as the this value and                        // 128\n        // argument list containing kValue, k, and O.                                                        // 129\n        callback.call(T, kValue, k, O);                                                                      // 130\n      }                                                                                                      // 131\n      // d. Increase k by 1.                                                                                 // 132\n      k++;                                                                                                   // 133\n    }                                                                                                        // 134\n    // 8. return undefined                                                                                   // 135\n  };                                                                                                         // 136\n}                                                                                                            // 137\n                                                                                                             // 138\n// Object.create polyfill                                                                                    // 139\n// Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create // 140\n                                                                                                             // 141\nif (typeof Object.create != 'function') {                                                                    // 142\n  // Production steps of ECMA-262, Edition 5, 15.2.3.5                                                       // 143\n  // Reference: http://es5.github.io/#x15.2.3.5                                                              // 144\n  Object.create = (function() {                                                                              // 145\n    // To save on memory, use a shared constructor                                                           // 146\n    function Temp() {}                                                                                       // 147\n                                                                                                             // 148\n    // make a safe reference to Object.prototype.hasOwnProperty                                              // 149\n    var hasOwn = Object.prototype.hasOwnProperty;                                                            // 150\n                                                                                                             // 151\n    return function (O) {                                                                                    // 152\n      // 1. If Type(O) is not Object or Null throw a TypeError exception.                                    // 153\n      if (typeof O != 'object') {                                                                            // 154\n        throw TypeError('Object prototype may only be an Object or null');                                   // 155\n      }                                                                                                      // 156\n                                                                                                             // 157\n      // 2. Let obj be the result of creating a new object as if by the                                      // 158\n      //    expression new Object() where Object is the standard built-in                                    // 159\n      //    constructor with that name                                                                       // 160\n      // 3. Set the [[Prototype]] internal property of obj to O.                                             // 161\n      Temp.prototype = O;                                                                                    // 162\n      var obj = new Temp();                                                                                  // 163\n      Temp.prototype = null; // Let's not keep a stray reference to O...                                     // 164\n                                                                                                             // 165\n      // 4. If the argument Properties is present and not undefined, add                                     // 166\n      //    own properties to obj as if by calling the standard built-in                                     // 167\n      //    function Object.defineProperties with arguments obj and                                          // 168\n      //    Properties.                                                                                      // 169\n      if (arguments.length > 1) {                                                                            // 170\n        // Object.defineProperties does ToObject on its first argument.                                      // 171\n        var Properties = Object(arguments[1]);                                                               // 172\n        for (var prop in Properties) {                                                                       // 173\n          if (hasOwn.call(Properties, prop)) {                                                               // 174\n            obj[prop] = Properties[prop];                                                                    // 175\n          }                                                                                                  // 176\n        }                                                                                                    // 177\n      }                                                                                                      // 178\n                                                                                                             // 179\n      // 5. Return obj                                                                                       // 180\n      return obj;                                                                                            // 181\n    };                                                                                                       // 182\n  })();                                                                                                      // 183\n}                                                                                                            // 184\n                                                                                                             // 185\n// isArray polyfill                                                                                          // 186\n// Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray // 187\nif (!Array.isArray) {                                                                                        // 188\n  Array.isArray = function(arg) {                                                                            // 189\n    return Object.prototype.toString.call(arg) === '[object Array]';                                         // 190\n  };                                                                                                         // 191\n}                                                                                                            // 192\n                                                                                                             // 193\n// Object.keys polyfill                                                                                      // 194\n// Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys   // 195\nif (!Object.keys) {                                                                                          // 196\n  Object.keys = (function() {                                                                                // 197\n    'use strict';                                                                                            // 198\n    var hasOwnProperty = Object.prototype.hasOwnProperty,                                                    // 199\n        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),                             // 200\n        dontEnums = [                                                                                        // 201\n          'toString',                                                                                        // 202\n          'toLocaleString',                                                                                  // 203\n          'valueOf',                                                                                         // 204\n          'hasOwnProperty',                                                                                  // 205\n          'isPrototypeOf',                                                                                   // 206\n          'propertyIsEnumerable',                                                                            // 207\n          'constructor'                                                                                      // 208\n        ],                                                                                                   // 209\n        dontEnumsLength = dontEnums.length;                                                                  // 210\n                                                                                                             // 211\n    return function(obj) {                                                                                   // 212\n      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {                          // 213\n        throw new TypeError('Object.keys called on non-object');                                             // 214\n      }                                                                                                      // 215\n                                                                                                             // 216\n      var result = [], prop, i;                                                                              // 217\n                                                                                                             // 218\n      for (prop in obj) {                                                                                    // 219\n        if (hasOwnProperty.call(obj, prop)) {                                                                // 220\n          result.push(prop);                                                                                 // 221\n        }                                                                                                    // 222\n      }                                                                                                      // 223\n                                                                                                             // 224\n      if (hasDontEnumBug) {                                                                                  // 225\n        for (i = 0; i < dontEnumsLength; i++) {                                                              // 226\n          if (hasOwnProperty.call(obj, dontEnums[i])) {                                                      // 227\n            result.push(dontEnums[i]);                                                                       // 228\n          }                                                                                                  // 229\n        }                                                                                                    // 230\n      }                                                                                                      // 231\n      return result;                                                                                         // 232\n    };                                                                                                       // 233\n  }());                                                                                                      // 234\n}                                                                                                            // 235\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}