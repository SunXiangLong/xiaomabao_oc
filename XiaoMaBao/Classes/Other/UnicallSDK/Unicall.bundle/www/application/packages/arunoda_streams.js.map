{"version":3,"sources":["meteor://ðŸ’»app/packages/arunoda_streams/packages/arunoda_streams.js"],"names":[],"mappingsiF","file":"/packages/arunoda_streams.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/arunoda:streams/lib/ev.js                                //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nfunction _EV() {                                                     // 1\n  var self = this;                                                   // 2\n  var handlers = {};                                                 // 3\n                                                                     // 4\n  self.emit = function emit(event) {                                 // 5\n    var args = Array.prototype.slice.call(arguments, 1);             // 6\n                                                                     // 7\n    if(handlers[event]) {                                            // 8\n      for(var lc=0; lc<handlers[event].length; lc++) {               // 9\n        var handler = handlers[event][lc];                           // 10\n        handler.apply(this, args);                                   // 11\n      }                                                              // 12\n    }                                                                // 13\n  };                                                                 // 14\n                                                                     // 15\n  self.on = function on(event, callback) {                           // 16\n    if(!handlers[event]) {                                           // 17\n      handlers[event] = [];                                          // 18\n    }                                                                // 19\n    handlers[event].push(callback);                                  // 20\n  };                                                                 // 21\n                                                                     // 22\n  self.once = function once(event, callback) {                       // 23\n    self.on(event, function onetimeCallback() {                      // 24\n      callback.apply(this, arguments);                               // 25\n      self.removeListener(event, onetimeCallback);                   // 26\n    });                                                              // 27\n  };                                                                 // 28\n                                                                     // 29\n  self.removeListener = function removeListener(event, callback) {   // 30\n    if(handlers[event]) {                                            // 31\n      var index = handlers[event].indexOf(callback);                 // 32\n      handlers[event].splice(index, 1);                              // 33\n    }                                                                // 34\n  };                                                                 // 35\n                                                                     // 36\n  self.removeAllListeners = function removeAllListeners(event) {     // 37\n    handlers[event] = undefined;                                     // 38\n  };                                                                 // 39\n}                                                                    // 40\n                                                                     // 41\nEV = _EV;                                                            // 42\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/arunoda:streams/lib/client.js                            //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\nMeteor.Stream = function Stream(name, callback) {                    // 1\n  EV.call(this);                                                     // 2\n                                                                     // 3\n  var self = this;                                                   // 4\n  var streamName = 'stream-' + name;                                 // 5\n  var collection = new Meteor.Collection(streamName);                // 6\n  var subscription;                                                  // 7\n  var subscriptionId;                                                // 8\n                                                                     // 9\n  var connected = false;                                             // 10\n  var pendingEvents = [];                                            // 11\n                                                                     // 12\n  self._emit = self.emit;                                            // 13\n                                                                     // 14\n  collection.find({}).observe({                                      // 15\n    \"added\": function(item) {                                        // 16\n      if(item.type == 'subscriptionId') {                            // 17\n        subscriptionId = item._id;                                   // 18\n        connected = true;                                            // 19\n        pendingEvents.forEach(function(args) {                       // 20\n          self.emit.apply(self, args);                               // 21\n        });                                                          // 22\n        pendingEvents = [];                                          // 23\n      } else {                                                       // 24\n        var context = {};                                            // 25\n        context.subscriptionId = item.subscriptionId;                // 26\n        context.userId = item.userId;                                // 27\n        self._emit.apply(context, item.args);                        // 28\n      }                                                              // 29\n    }                                                                // 30\n  });                                                                // 31\n                                                                     // 32\n  subscription = Meteor.subscribe(streamName, callback);             // 33\n                                                                     // 34\n  self.emit = function emit() {                                      // 35\n    if(connected) {                                                  // 36\n      Meteor.call(streamName, subscriptionId, arguments);            // 37\n    } else {                                                         // 38\n      pendingEvents.push(arguments);                                 // 39\n    }                                                                // 40\n  };                                                                 // 41\n                                                                     // 42\n  self.close = function close() {                                    // 43\n    subscription.stop();                                             // 44\n  };                                                                 // 45\n}                                                                    // 46\n                                                                     // 47\n_.extend(Meteor.Stream.prototype, EV.prototype);                     // 48\n                                                                     // 49\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}