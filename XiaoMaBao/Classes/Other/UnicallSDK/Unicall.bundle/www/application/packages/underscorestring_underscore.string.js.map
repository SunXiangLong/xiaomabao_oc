{"version":3,"sources":["meteor://💻app/packages/underscorestring_underscore.string/packages/underscorestring_underscore.string.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4E","file":"/packages/underscorestring_underscore.string.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring:underscore.string/meteor-pre.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Defining this will trick dist/underscore.string.js into putting its exports into module.exports                    // 1\n// Credit to Tim Heckel for this trick - see https://github.com/TimHeckel/meteor-underscore-string                    // 2\nmodule = {};                                                                                                          // 3\n                                                                                                                      // 4\n// This also needed, otherwise above doesn't work???                                                                  // 5\nexports = {};                                                                                                         // 6\n                                                                                                                      // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring:underscore.string/dist/underscore.string.js                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* underscore.string 3.2.1 | MIT licensed | http://epeli.github.com/underscore.string/ */                             // 1\n                                                                                                                      // 2\n!function(e){if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.s=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nvar trim = _dereq_('./trim');                                                                                         // 4\nvar decap = _dereq_('./decapitalize');                                                                                // 5\n                                                                                                                      // 6\nmodule.exports = function camelize(str, decapitalize) {                                                               // 7\n  str = trim(str).replace(/[-_\\s]+(.)?/g, function(match, c) {                                                        // 8\n    return c ? c.toUpperCase() : \"\";                                                                                  // 9\n  });                                                                                                                 // 10\n                                                                                                                      // 11\n  if (decapitalize === true) {                                                                                        // 12\n    return decap(str);                                                                                                // 13\n  } else {                                                                                                            // 14\n    return str;                                                                                                       // 15\n  }                                                                                                                   // 16\n};                                                                                                                    // 17\n                                                                                                                      // 18\n},{\"./decapitalize\":10,\"./trim\":62}],2:[function(_dereq_,module,exports){                                             // 19\nvar makeString = _dereq_('./helper/makeString');                                                                      // 20\n                                                                                                                      // 21\nmodule.exports = function capitalize(str, lowercaseRest) {                                                            // 22\n  str = makeString(str);                                                                                              // 23\n  var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();                                    // 24\n                                                                                                                      // 25\n  return str.charAt(0).toUpperCase() + remainingChars;                                                                // 26\n};                                                                                                                    // 27\n                                                                                                                      // 28\n},{\"./helper/makeString\":21}],3:[function(_dereq_,module,exports){                                                    // 29\nvar makeString = _dereq_('./helper/makeString');                                                                      // 30\n                                                                                                                      // 31\nmodule.exports = function chars(str) {                                                                                // 32\n  return makeString(str).split('');                                                                                   // 33\n};                                                                                                                    // 34\n                                                                                                                      // 35\n},{\"./helper/makeString\":21}],4:[function(_dereq_,module,exports){                                                    // 36\nmodule.exports = function chop(str, step) {                                                                           // 37\n  if (str == null) return [];                                                                                         // 38\n  str = String(str);                                                                                                  // 39\n  step = ~~step;                                                                                                      // 40\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];                                          // 41\n};                                                                                                                    // 42\n                                                                                                                      // 43\n},{}],5:[function(_dereq_,module,exports){                                                                            // 44\nvar capitalize = _dereq_('./capitalize');                                                                             // 45\nvar camelize = _dereq_('./camelize');                                                                                 // 46\nvar makeString = _dereq_('./helper/makeString');                                                                      // 47\n                                                                                                                      // 48\nmodule.exports = function classify(str) {                                                                             // 49\n  str = makeString(str);                                                                                              // 50\n  return capitalize(camelize(str.replace(/[\\W_]/g, ' ')).replace(/\\s/g, ''));                                         // 51\n};                                                                                                                    // 52\n                                                                                                                      // 53\n},{\"./camelize\":1,\"./capitalize\":2,\"./helper/makeString\":21}],6:[function(_dereq_,module,exports){                    // 54\nvar trim = _dereq_('./trim');                                                                                         // 55\n                                                                                                                      // 56\nmodule.exports = function clean(str) {                                                                                // 57\n  return trim(str).replace(/\\s\\s+/g, ' ');                                                                            // 58\n};                                                                                                                    // 59\n                                                                                                                      // 60\n},{\"./trim\":62}],7:[function(_dereq_,module,exports){                                                                 // 61\n                                                                                                                      // 62\nvar makeString = _dereq_('./helper/makeString');                                                                      // 63\n                                                                                                                      // 64\nvar from  = \"ąàáäâãåæăćčĉęèéëêĝĥìíïîĵłľńňòóöőôõðøśșšŝťțŭùúüűûñÿýçżźž\",                                                // 65\n    to    = \"aaaaaaaaaccceeeeeghiiiijllnnoooooooossssttuuuuuunyyczzz\";                                                // 66\n                                                                                                                      // 67\nfrom += from.toUpperCase();                                                                                           // 68\nto += to.toUpperCase();                                                                                               // 69\n                                                                                                                      // 70\nmodule.exports = function cleanDiacritics(str) {                                                                      // 71\n    return makeString(str).replace(/.{1}/g, function(c){                                                              // 72\n      var index = from.indexOf(c);                                                                                    // 73\n      return index === -1 ? c : to.charAt(index);                                                                     // 74\n  });                                                                                                                 // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\n},{\"./helper/makeString\":21}],8:[function(_dereq_,module,exports){                                                    // 78\nvar makeString = _dereq_('./helper/makeString');                                                                      // 79\n                                                                                                                      // 80\nmodule.exports = function(str, substr) {                                                                              // 81\n  str = makeString(str);                                                                                              // 82\n  substr = makeString(substr);                                                                                        // 83\n                                                                                                                      // 84\n  if (str.length === 0 || substr.length === 0) return 0;                                                              // 85\n                                                                                                                      // 86\n  return str.split(substr).length - 1;                                                                                // 87\n};                                                                                                                    // 88\n                                                                                                                      // 89\n},{\"./helper/makeString\":21}],9:[function(_dereq_,module,exports){                                                    // 90\nvar trim = _dereq_('./trim');                                                                                         // 91\n                                                                                                                      // 92\nmodule.exports = function dasherize(str) {                                                                            // 93\n  return trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\\s]+/g, '-').toLowerCase();                                 // 94\n};                                                                                                                    // 95\n                                                                                                                      // 96\n},{\"./trim\":62}],10:[function(_dereq_,module,exports){                                                                // 97\nvar makeString = _dereq_('./helper/makeString');                                                                      // 98\n                                                                                                                      // 99\nmodule.exports = function decapitalize(str) {                                                                         // 100\n  str = makeString(str);                                                                                              // 101\n  return str.charAt(0).toLowerCase() + str.slice(1);                                                                  // 102\n};                                                                                                                    // 103\n                                                                                                                      // 104\n},{\"./helper/makeString\":21}],11:[function(_dereq_,module,exports){                                                   // 105\nvar makeString = _dereq_('./helper/makeString');                                                                      // 106\n                                                                                                                      // 107\nfunction getIndent(str) {                                                                                             // 108\n  var matches = str.match(/^[\\s\\\\t]*/gm);                                                                             // 109\n  var indent = matches[0].length;                                                                                     // 110\n                                                                                                                      // 111\n  for (var i = 1; i < matches.length; i++) {                                                                          // 112\n    indent = Math.min(matches[i].length, indent);                                                                     // 113\n  }                                                                                                                   // 114\n                                                                                                                      // 115\n  return indent;                                                                                                      // 116\n}                                                                                                                     // 117\n                                                                                                                      // 118\nmodule.exports = function dedent(str, pattern) {                                                                      // 119\n  str = makeString(str);                                                                                              // 120\n  var indent = getIndent(str);                                                                                        // 121\n  var reg;                                                                                                            // 122\n                                                                                                                      // 123\n  if (indent === 0) return str;                                                                                       // 124\n                                                                                                                      // 125\n  if (typeof pattern === 'string') {                                                                                  // 126\n    reg = new RegExp('^' + pattern, 'gm');                                                                            // 127\n  } else {                                                                                                            // 128\n    reg = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');                                                                // 129\n  }                                                                                                                   // 130\n                                                                                                                      // 131\n  return str.replace(reg, '');                                                                                        // 132\n};                                                                                                                    // 133\n                                                                                                                      // 134\n},{\"./helper/makeString\":21}],12:[function(_dereq_,module,exports){                                                   // 135\nvar makeString = _dereq_('./helper/makeString');                                                                      // 136\nvar toPositive = _dereq_('./helper/toPositive');                                                                      // 137\n                                                                                                                      // 138\nmodule.exports = function endsWith(str, ends, position) {                                                             // 139\n  str = makeString(str);                                                                                              // 140\n  ends = '' + ends;                                                                                                   // 141\n  if (typeof position == 'undefined') {                                                                               // 142\n    position = str.length - ends.length;                                                                              // 143\n  } else {                                                                                                            // 144\n    position = Math.min(toPositive(position), str.length) - ends.length;                                              // 145\n  }                                                                                                                   // 146\n  return position >= 0 && str.indexOf(ends, position) === position;                                                   // 147\n};                                                                                                                    // 148\n                                                                                                                      // 149\n},{\"./helper/makeString\":21,\"./helper/toPositive\":23}],13:[function(_dereq_,module,exports){                          // 150\nvar makeString = _dereq_('./helper/makeString');                                                                      // 151\nvar escapeChars = _dereq_('./helper/escapeChars');                                                                    // 152\nvar reversedEscapeChars = {};                                                                                         // 153\n                                                                                                                      // 154\nvar regexString = \"[\";                                                                                                // 155\nfor(var key in escapeChars) {                                                                                         // 156\n  regexString += key;                                                                                                 // 157\n}                                                                                                                     // 158\nregexString += \"]\";                                                                                                   // 159\n                                                                                                                      // 160\nvar regex = new RegExp( regexString, 'g');                                                                            // 161\n                                                                                                                      // 162\nmodule.exports = function escapeHTML(str) {                                                                           // 163\n                                                                                                                      // 164\n  return makeString(str).replace(regex, function(m) {                                                                 // 165\n    return '&' + escapeChars[m] + ';';                                                                                // 166\n  });                                                                                                                 // 167\n};                                                                                                                    // 168\n                                                                                                                      // 169\n},{\"./helper/escapeChars\":18,\"./helper/makeString\":21}],14:[function(_dereq_,module,exports){                         // 170\nmodule.exports = function() {                                                                                         // 171\n  var result = {};                                                                                                    // 172\n                                                                                                                      // 173\n  for (var prop in this) {                                                                                            // 174\n    if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse|join)$/)) continue;                    // 175\n    result[prop] = this[prop];                                                                                        // 176\n  }                                                                                                                   // 177\n                                                                                                                      // 178\n  return result;                                                                                                      // 179\n};                                                                                                                    // 180\n                                                                                                                      // 181\n},{}],15:[function(_dereq_,module,exports){                                                                           // 182\n//  Underscore.string                                                                                                 // 183\n//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>                                                      // 184\n//  Underscore.string is freely distributable under the terms of the MIT license.                                     // 185\n//  Documentation: https://github.com/epeli/underscore.string                                                         // 186\n//  Some code is borrowed from MooTools and Alexandru Marasteanu.                                                     // 187\n//  Version '3.2.1'                                                                                                   // 188\n                                                                                                                      // 189\n'use strict';                                                                                                         // 190\n                                                                                                                      // 191\nfunction s(value) {                                                                                                   // 192\n  /* jshint validthis: true */                                                                                        // 193\n  if (!(this instanceof s)) return new s(value);                                                                      // 194\n  this._wrapped = value;                                                                                              // 195\n}                                                                                                                     // 196\n                                                                                                                      // 197\ns.VERSION = '3.2.1';                                                                                                  // 198\n                                                                                                                      // 199\ns.isBlank          = _dereq_('./isBlank');                                                                            // 200\ns.stripTags        = _dereq_('./stripTags');                                                                          // 201\ns.capitalize       = _dereq_('./capitalize');                                                                         // 202\ns.decapitalize     = _dereq_('./decapitalize');                                                                       // 203\ns.chop             = _dereq_('./chop');                                                                               // 204\ns.trim             = _dereq_('./trim');                                                                               // 205\ns.clean            = _dereq_('./clean');                                                                              // 206\ns.cleanDiacritics  = _dereq_('./cleanDiacritics');                                                                    // 207\ns.count            = _dereq_('./count');                                                                              // 208\ns.chars            = _dereq_('./chars');                                                                              // 209\ns.swapCase         = _dereq_('./swapCase');                                                                           // 210\ns.escapeHTML       = _dereq_('./escapeHTML');                                                                         // 211\ns.unescapeHTML     = _dereq_('./unescapeHTML');                                                                       // 212\ns.splice           = _dereq_('./splice');                                                                             // 213\ns.insert           = _dereq_('./insert');                                                                             // 214\ns.replaceAll       = _dereq_('./replaceAll');                                                                         // 215\ns.include          = _dereq_('./include');                                                                            // 216\ns.join             = _dereq_('./join');                                                                               // 217\ns.lines            = _dereq_('./lines');                                                                              // 218\ns.dedent           = _dereq_('./dedent');                                                                             // 219\ns.reverse          = _dereq_('./reverse');                                                                            // 220\ns.startsWith       = _dereq_('./startsWith');                                                                         // 221\ns.endsWith         = _dereq_('./endsWith');                                                                           // 222\ns.pred             = _dereq_('./pred');                                                                               // 223\ns.succ             = _dereq_('./succ');                                                                               // 224\ns.titleize         = _dereq_('./titleize');                                                                           // 225\ns.camelize         = _dereq_('./camelize');                                                                           // 226\ns.underscored      = _dereq_('./underscored');                                                                        // 227\ns.dasherize        = _dereq_('./dasherize');                                                                          // 228\ns.classify         = _dereq_('./classify');                                                                           // 229\ns.humanize         = _dereq_('./humanize');                                                                           // 230\ns.ltrim            = _dereq_('./ltrim');                                                                              // 231\ns.rtrim            = _dereq_('./rtrim');                                                                              // 232\ns.truncate         = _dereq_('./truncate');                                                                           // 233\ns.prune            = _dereq_('./prune');                                                                              // 234\ns.words            = _dereq_('./words');                                                                              // 235\ns.pad              = _dereq_('./pad');                                                                                // 236\ns.lpad             = _dereq_('./lpad');                                                                               // 237\ns.rpad             = _dereq_('./rpad');                                                                               // 238\ns.lrpad            = _dereq_('./lrpad');                                                                              // 239\ns.sprintf          = _dereq_('./sprintf');                                                                            // 240\ns.vsprintf         = _dereq_('./vsprintf');                                                                           // 241\ns.toNumber         = _dereq_('./toNumber');                                                                           // 242\ns.numberFormat     = _dereq_('./numberFormat');                                                                       // 243\ns.strRight         = _dereq_('./strRight');                                                                           // 244\ns.strRightBack     = _dereq_('./strRightBack');                                                                       // 245\ns.strLeft          = _dereq_('./strLeft');                                                                            // 246\ns.strLeftBack      = _dereq_('./strLeftBack');                                                                        // 247\ns.toSentence       = _dereq_('./toSentence');                                                                         // 248\ns.toSentenceSerial = _dereq_('./toSentenceSerial');                                                                   // 249\ns.slugify          = _dereq_('./slugify');                                                                            // 250\ns.surround         = _dereq_('./surround');                                                                           // 251\ns.quote            = _dereq_('./quote');                                                                              // 252\ns.unquote          = _dereq_('./unquote');                                                                            // 253\ns.repeat           = _dereq_('./repeat');                                                                             // 254\ns.naturalCmp       = _dereq_('./naturalCmp');                                                                         // 255\ns.levenshtein      = _dereq_('./levenshtein');                                                                        // 256\ns.toBoolean        = _dereq_('./toBoolean');                                                                          // 257\ns.exports          = _dereq_('./exports');                                                                            // 258\ns.escapeRegExp     = _dereq_('./helper/escapeRegExp');                                                                // 259\ns.wrap             = _dereq_('./wrap');                                                                               // 260\n                                                                                                                      // 261\n// Aliases                                                                                                            // 262\ns.strip     = s.trim;                                                                                                 // 263\ns.lstrip    = s.ltrim;                                                                                                // 264\ns.rstrip    = s.rtrim;                                                                                                // 265\ns.center    = s.lrpad;                                                                                                // 266\ns.rjust     = s.lpad;                                                                                                 // 267\ns.ljust     = s.rpad;                                                                                                 // 268\ns.contains  = s.include;                                                                                              // 269\ns.q         = s.quote;                                                                                                // 270\ns.toBool    = s.toBoolean;                                                                                            // 271\ns.camelcase = s.camelize;                                                                                             // 272\n                                                                                                                      // 273\n                                                                                                                      // 274\n// Implement chaining                                                                                                 // 275\ns.prototype = {                                                                                                       // 276\n  value: function value() {                                                                                           // 277\n    return this._wrapped;                                                                                             // 278\n  }                                                                                                                   // 279\n};                                                                                                                    // 280\n                                                                                                                      // 281\nfunction fn2method(key, fn) {                                                                                         // 282\n    if (typeof fn !== \"function\") return;                                                                             // 283\n    s.prototype[key] = function() {                                                                                   // 284\n      var args = [this._wrapped].concat(Array.prototype.slice.call(arguments));                                       // 285\n      var res = fn.apply(null, args);                                                                                 // 286\n      // if the result is non-string stop the chain and return the value                                              // 287\n      return typeof res === 'string' ? new s(res) : res;                                                              // 288\n    };                                                                                                                // 289\n}                                                                                                                     // 290\n                                                                                                                      // 291\n// Copy functions to instance methods for chaining                                                                    // 292\nfor (var key in s) fn2method(key, s[key]);                                                                            // 293\n                                                                                                                      // 294\nfn2method(\"tap\", function tap(string, fn) {                                                                           // 295\n  return fn(string);                                                                                                  // 296\n});                                                                                                                   // 297\n                                                                                                                      // 298\nfunction prototype2method(methodName) {                                                                               // 299\n  fn2method(methodName, function(context) {                                                                           // 300\n    var args = Array.prototype.slice.call(arguments, 1);                                                              // 301\n    return String.prototype[methodName].apply(context, args);                                                         // 302\n  });                                                                                                                 // 303\n}                                                                                                                     // 304\n                                                                                                                      // 305\nvar prototypeMethods = [                                                                                              // 306\n  \"toUpperCase\",                                                                                                      // 307\n  \"toLowerCase\",                                                                                                      // 308\n  \"split\",                                                                                                            // 309\n  \"replace\",                                                                                                          // 310\n  \"slice\",                                                                                                            // 311\n  \"substring\",                                                                                                        // 312\n  \"substr\",                                                                                                           // 313\n  \"concat\"                                                                                                            // 314\n];                                                                                                                    // 315\n                                                                                                                      // 316\nfor (var key in prototypeMethods) prototype2method(prototypeMethods[key]);                                            // 317\n                                                                                                                      // 318\n                                                                                                                      // 319\nmodule.exports = s;                                                                                                   // 320\n                                                                                                                      // 321\n},{\"./camelize\":1,\"./capitalize\":2,\"./chars\":3,\"./chop\":4,\"./classify\":5,\"./clean\":6,\"./cleanDiacritics\":7,\"./count\":8,\"./dasherize\":9,\"./decapitalize\":10,\"./dedent\":11,\"./endsWith\":12,\"./escapeHTML\":13,\"./exports\":14,\"./helper/escapeRegExp\":19,\"./humanize\":24,\"./include\":25,\"./insert\":26,\"./isBlank\":27,\"./join\":28,\"./levenshtein\":29,\"./lines\":30,\"./lpad\":31,\"./lrpad\":32,\"./ltrim\":33,\"./naturalCmp\":34,\"./numberFormat\":35,\"./pad\":36,\"./pred\":37,\"./prune\":38,\"./quote\":39,\"./repeat\":40,\"./replaceAll\":41,\"./reverse\":42,\"./rpad\":43,\"./rtrim\":44,\"./slugify\":45,\"./splice\":46,\"./sprintf\":47,\"./startsWith\":48,\"./strLeft\":49,\"./strLeftBack\":50,\"./strRight\":51,\"./strRightBack\":52,\"./stripTags\":53,\"./succ\":54,\"./surround\":55,\"./swapCase\":56,\"./titleize\":57,\"./toBoolean\":58,\"./toNumber\":59,\"./toSentence\":60,\"./toSentenceSerial\":61,\"./trim\":62,\"./truncate\":63,\"./underscored\":64,\"./unescapeHTML\":65,\"./unquote\":66,\"./vsprintf\":67,\"./words\":68,\"./wrap\":69}],16:[function(_dereq_,module,exports){\nvar makeString = _dereq_('./makeString');                                                                             // 323\n                                                                                                                      // 324\nmodule.exports = function adjacent(str, direction) {                                                                  // 325\n  str = makeString(str);                                                                                              // 326\n  if (str.length === 0) {                                                                                             // 327\n    return '';                                                                                                        // 328\n  }                                                                                                                   // 329\n  return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length - 1) + direction);                          // 330\n};                                                                                                                    // 331\n                                                                                                                      // 332\n},{\"./makeString\":21}],17:[function(_dereq_,module,exports){                                                          // 333\nvar escapeRegExp = _dereq_('./escapeRegExp');                                                                         // 334\n                                                                                                                      // 335\nmodule.exports = function defaultToWhiteSpace(characters) {                                                           // 336\n  if (characters == null)                                                                                             // 337\n    return '\\\\s';                                                                                                     // 338\n  else if (characters.source)                                                                                         // 339\n    return characters.source;                                                                                         // 340\n  else                                                                                                                // 341\n    return '[' + escapeRegExp(characters) + ']';                                                                      // 342\n};                                                                                                                    // 343\n                                                                                                                      // 344\n},{\"./escapeRegExp\":19}],18:[function(_dereq_,module,exports){                                                        // 345\n/* We're explicitly defining the list of entities we want to escape.                                                  // 346\nnbsp is an HTML entity, but we don't want to escape all space characters in a string, hence its omission in this map. // 347\n                                                                                                                      // 348\n*/                                                                                                                    // 349\nvar escapeChars = {                                                                                                   // 350\n  '¢' : 'cent',                                                                                                       // 351\n  '£' : 'pound',                                                                                                      // 352\n  '¥' : 'yen',                                                                                                        // 353\n  '€': 'euro',                                                                                                        // 354\n  '©' :'copy',                                                                                                        // 355\n  '®' : 'reg',                                                                                                        // 356\n  '<' : 'lt',                                                                                                         // 357\n  '>' : 'gt',                                                                                                         // 358\n  '\"' : 'quot',                                                                                                       // 359\n  '&' : 'amp',                                                                                                        // 360\n  \"'\": '#39'                                                                                                          // 361\n};                                                                                                                    // 362\n                                                                                                                      // 363\nmodule.exports = escapeChars;                                                                                         // 364\n                                                                                                                      // 365\n},{}],19:[function(_dereq_,module,exports){                                                                           // 366\nvar makeString = _dereq_('./makeString');                                                                             // 367\n                                                                                                                      // 368\nmodule.exports = function escapeRegExp(str) {                                                                         // 369\n  return makeString(str).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');                                               // 370\n};                                                                                                                    // 371\n                                                                                                                      // 372\n},{\"./makeString\":21}],20:[function(_dereq_,module,exports){                                                          // 373\n/*                                                                                                                    // 374\nWe're explicitly defining the list of entities that might see in escape HTML strings                                  // 375\n*/                                                                                                                    // 376\nvar htmlEntities = {                                                                                                  // 377\n  nbsp: ' ',                                                                                                          // 378\n  cent: '¢',                                                                                                          // 379\n  pound: '£',                                                                                                         // 380\n  yen: '¥',                                                                                                           // 381\n  euro: '€',                                                                                                          // 382\n  copy: '©',                                                                                                          // 383\n  reg: '®',                                                                                                           // 384\n  lt: '<',                                                                                                            // 385\n  gt: '>',                                                                                                            // 386\n  quot: '\"',                                                                                                          // 387\n  amp: '&',                                                                                                           // 388\n  apos: \"'\"                                                                                                           // 389\n};                                                                                                                    // 390\n                                                                                                                      // 391\nmodule.exports = htmlEntities;                                                                                        // 392\n                                                                                                                      // 393\n},{}],21:[function(_dereq_,module,exports){                                                                           // 394\n/**                                                                                                                   // 395\n * Ensure some object is a coerced to a string                                                                        // 396\n **/                                                                                                                  // 397\nmodule.exports = function makeString(object) {                                                                        // 398\n  if (object == null) return '';                                                                                      // 399\n  return '' + object;                                                                                                 // 400\n};                                                                                                                    // 401\n                                                                                                                      // 402\n},{}],22:[function(_dereq_,module,exports){                                                                           // 403\nmodule.exports = function strRepeat(str, qty){                                                                        // 404\n  if (qty < 1) return '';                                                                                             // 405\n  var result = '';                                                                                                    // 406\n  while (qty > 0) {                                                                                                   // 407\n    if (qty & 1) result += str;                                                                                       // 408\n    qty >>= 1, str += str;                                                                                            // 409\n  }                                                                                                                   // 410\n  return result;                                                                                                      // 411\n};                                                                                                                    // 412\n                                                                                                                      // 413\n},{}],23:[function(_dereq_,module,exports){                                                                           // 414\nmodule.exports = function toPositive(number) {                                                                        // 415\n  return number < 0 ? 0 : (+number || 0);                                                                             // 416\n};                                                                                                                    // 417\n                                                                                                                      // 418\n},{}],24:[function(_dereq_,module,exports){                                                                           // 419\nvar capitalize = _dereq_('./capitalize');                                                                             // 420\nvar underscored = _dereq_('./underscored');                                                                           // 421\nvar trim = _dereq_('./trim');                                                                                         // 422\n                                                                                                                      // 423\nmodule.exports = function humanize(str) {                                                                             // 424\n  return capitalize(trim(underscored(str).replace(/_id$/, '').replace(/_/g, ' ')));                                   // 425\n};                                                                                                                    // 426\n                                                                                                                      // 427\n},{\"./capitalize\":2,\"./trim\":62,\"./underscored\":64}],25:[function(_dereq_,module,exports){                            // 428\nvar makeString = _dereq_('./helper/makeString');                                                                      // 429\n                                                                                                                      // 430\nmodule.exports = function include(str, needle) {                                                                      // 431\n  if (needle === '') return true;                                                                                     // 432\n  return makeString(str).indexOf(needle) !== -1;                                                                      // 433\n};                                                                                                                    // 434\n                                                                                                                      // 435\n},{\"./helper/makeString\":21}],26:[function(_dereq_,module,exports){                                                   // 436\nvar splice = _dereq_('./splice');                                                                                     // 437\n                                                                                                                      // 438\nmodule.exports = function insert(str, i, substr) {                                                                    // 439\n  return splice(str, i, 0, substr);                                                                                   // 440\n};                                                                                                                    // 441\n                                                                                                                      // 442\n},{\"./splice\":46}],27:[function(_dereq_,module,exports){                                                              // 443\nvar makeString = _dereq_('./helper/makeString');                                                                      // 444\n                                                                                                                      // 445\nmodule.exports = function isBlank(str) {                                                                              // 446\n  return (/^\\s*$/).test(makeString(str));                                                                             // 447\n};                                                                                                                    // 448\n                                                                                                                      // 449\n},{\"./helper/makeString\":21}],28:[function(_dereq_,module,exports){                                                   // 450\nvar makeString = _dereq_('./helper/makeString');                                                                      // 451\nvar slice = [].slice;                                                                                                 // 452\n                                                                                                                      // 453\nmodule.exports = function join() {                                                                                    // 454\n  var args = slice.call(arguments),                                                                                   // 455\n    separator = args.shift();                                                                                         // 456\n                                                                                                                      // 457\n  return args.join(makeString(separator));                                                                            // 458\n};                                                                                                                    // 459\n                                                                                                                      // 460\n},{\"./helper/makeString\":21}],29:[function(_dereq_,module,exports){                                                   // 461\nvar makeString = _dereq_('./helper/makeString');                                                                      // 462\n                                                                                                                      // 463\n/**                                                                                                                   // 464\n * Based on the implementation here: https://github.com/hiddentao/fast-levenshtein                                    // 465\n */                                                                                                                   // 466\nmodule.exports = function levenshtein(str1, str2) {                                                                   // 467\n  'use strict';                                                                                                       // 468\n  str1 = makeString(str1);                                                                                            // 469\n  str2 = makeString(str2);                                                                                            // 470\n                                                                                                                      // 471\n  // Short cut cases                                                                                                  // 472\n  if (str1 === str2) return 0;                                                                                        // 473\n  if (!str1 || !str2) return Math.max(str1.length, str2.length);                                                      // 474\n                                                                                                                      // 475\n  // two rows                                                                                                         // 476\n  var prevRow = new Array(str2.length + 1);                                                                           // 477\n                                                                                                                      // 478\n  // initialise previous row                                                                                          // 479\n  for (var i = 0; i < prevRow.length; ++i) {                                                                          // 480\n    prevRow[i] = i;                                                                                                   // 481\n  }                                                                                                                   // 482\n                                                                                                                      // 483\n  // calculate current row distance from previous row                                                                 // 484\n  for (i = 0; i < str1.length; ++i) {                                                                                 // 485\n    var nextCol = i + 1;                                                                                              // 486\n                                                                                                                      // 487\n    for (var j = 0; j < str2.length; ++j) {                                                                           // 488\n      var curCol = nextCol;                                                                                           // 489\n                                                                                                                      // 490\n      // substution                                                                                                   // 491\n      nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );                                         // 492\n      // insertion                                                                                                    // 493\n      var tmp = curCol + 1;                                                                                           // 494\n      if (nextCol > tmp) {                                                                                            // 495\n        nextCol = tmp;                                                                                                // 496\n      }                                                                                                               // 497\n      // deletion                                                                                                     // 498\n      tmp = prevRow[j + 1] + 1;                                                                                       // 499\n      if (nextCol > tmp) {                                                                                            // 500\n        nextCol = tmp;                                                                                                // 501\n      }                                                                                                               // 502\n                                                                                                                      // 503\n      // copy current col value into previous (in preparation for next iteration)                                     // 504\n      prevRow[j] = curCol;                                                                                            // 505\n    }                                                                                                                 // 506\n                                                                                                                      // 507\n    // copy last col value into previous (in preparation for next iteration)                                          // 508\n    prevRow[j] = nextCol;                                                                                             // 509\n  }                                                                                                                   // 510\n                                                                                                                      // 511\n  return nextCol;                                                                                                     // 512\n};                                                                                                                    // 513\n                                                                                                                      // 514\n},{\"./helper/makeString\":21}],30:[function(_dereq_,module,exports){                                                   // 515\nmodule.exports = function lines(str) {                                                                                // 516\n  if (str == null) return [];                                                                                         // 517\n  return String(str).split(/\\r\\n?|\\n/);                                                                               // 518\n};                                                                                                                    // 519\n                                                                                                                      // 520\n},{}],31:[function(_dereq_,module,exports){                                                                           // 521\nvar pad = _dereq_('./pad');                                                                                           // 522\n                                                                                                                      // 523\nmodule.exports = function lpad(str, length, padStr) {                                                                 // 524\n  return pad(str, length, padStr);                                                                                    // 525\n};                                                                                                                    // 526\n                                                                                                                      // 527\n},{\"./pad\":36}],32:[function(_dereq_,module,exports){                                                                 // 528\nvar pad = _dereq_('./pad');                                                                                           // 529\n                                                                                                                      // 530\nmodule.exports = function lrpad(str, length, padStr) {                                                                // 531\n  return pad(str, length, padStr, 'both');                                                                            // 532\n};                                                                                                                    // 533\n                                                                                                                      // 534\n},{\"./pad\":36}],33:[function(_dereq_,module,exports){                                                                 // 535\nvar makeString = _dereq_('./helper/makeString');                                                                      // 536\nvar defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');                                                    // 537\nvar nativeTrimLeft = String.prototype.trimLeft;                                                                       // 538\n                                                                                                                      // 539\nmodule.exports = function ltrim(str, characters) {                                                                    // 540\n  str = makeString(str);                                                                                              // 541\n  if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);                                                 // 542\n  characters = defaultToWhiteSpace(characters);                                                                       // 543\n  return str.replace(new RegExp('^' + characters + '+'), '');                                                         // 544\n};                                                                                                                    // 545\n                                                                                                                      // 546\n},{\"./helper/defaultToWhiteSpace\":17,\"./helper/makeString\":21}],34:[function(_dereq_,module,exports){                 // 547\nmodule.exports = function naturalCmp(str1, str2) {                                                                    // 548\n  if (str1 == str2) return 0;                                                                                         // 549\n  if (!str1) return -1;                                                                                               // 550\n  if (!str2) return 1;                                                                                                // 551\n                                                                                                                      // 552\n  var cmpRegex = /(\\.\\d+|\\d+|\\D+)/g,                                                                                  // 553\n    tokens1 = String(str1).match(cmpRegex),                                                                           // 554\n    tokens2 = String(str2).match(cmpRegex),                                                                           // 555\n    count = Math.min(tokens1.length, tokens2.length);                                                                 // 556\n                                                                                                                      // 557\n  for (var i = 0; i < count; i++) {                                                                                   // 558\n    var a = tokens1[i],                                                                                               // 559\n      b = tokens2[i];                                                                                                 // 560\n                                                                                                                      // 561\n    if (a !== b) {                                                                                                    // 562\n      var num1 = +a;                                                                                                  // 563\n      var num2 = +b;                                                                                                  // 564\n      if (num1 === num1 && num2 === num2) {                                                                           // 565\n        return num1 > num2 ? 1 : -1;                                                                                  // 566\n      }                                                                                                               // 567\n      return a < b ? -1 : 1;                                                                                          // 568\n    }                                                                                                                 // 569\n  }                                                                                                                   // 570\n                                                                                                                      // 571\n  if (tokens1.length != tokens2.length)                                                                               // 572\n    return tokens1.length - tokens2.length;                                                                           // 573\n                                                                                                                      // 574\n  return str1 < str2 ? -1 : 1;                                                                                        // 575\n};                                                                                                                    // 576\n                                                                                                                      // 577\n},{}],35:[function(_dereq_,module,exports){                                                                           // 578\nmodule.exports = function numberFormat(number, dec, dsep, tsep) {                                                     // 579\n  if (isNaN(number) || number == null) return '';                                                                     // 580\n                                                                                                                      // 581\n  number = number.toFixed(~~dec);                                                                                     // 582\n  tsep = typeof tsep == 'string' ? tsep : ',';                                                                        // 583\n                                                                                                                      // 584\n  var parts = number.split('.'),                                                                                      // 585\n    fnums = parts[0],                                                                                                 // 586\n    decimals = parts[1] ? (dsep || '.') + parts[1] : '';                                                              // 587\n                                                                                                                      // 588\n  return fnums.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1' + tsep) + decimals;                                               // 589\n};                                                                                                                    // 590\n                                                                                                                      // 591\n},{}],36:[function(_dereq_,module,exports){                                                                           // 592\nvar makeString = _dereq_('./helper/makeString');                                                                      // 593\nvar strRepeat = _dereq_('./helper/strRepeat');                                                                        // 594\n                                                                                                                      // 595\nmodule.exports = function pad(str, length, padStr, type) {                                                            // 596\n  str = makeString(str);                                                                                              // 597\n  length = ~~length;                                                                                                  // 598\n                                                                                                                      // 599\n  var padlen = 0;                                                                                                     // 600\n                                                                                                                      // 601\n  if (!padStr)                                                                                                        // 602\n    padStr = ' ';                                                                                                     // 603\n  else if (padStr.length > 1)                                                                                         // 604\n    padStr = padStr.charAt(0);                                                                                        // 605\n                                                                                                                      // 606\n  switch (type) {                                                                                                     // 607\n    case 'right':                                                                                                     // 608\n      padlen = length - str.length;                                                                                   // 609\n      return str + strRepeat(padStr, padlen);                                                                         // 610\n    case 'both':                                                                                                      // 611\n      padlen = length - str.length;                                                                                   // 612\n      return strRepeat(padStr, Math.ceil(padlen / 2)) + str + strRepeat(padStr, Math.floor(padlen / 2));              // 613\n    default: // 'left'                                                                                                // 614\n      padlen = length - str.length;                                                                                   // 615\n      return strRepeat(padStr, padlen) + str;                                                                         // 616\n  }                                                                                                                   // 617\n};                                                                                                                    // 618\n                                                                                                                      // 619\n},{\"./helper/makeString\":21,\"./helper/strRepeat\":22}],37:[function(_dereq_,module,exports){                           // 620\nvar adjacent = _dereq_('./helper/adjacent');                                                                          // 621\n                                                                                                                      // 622\nmodule.exports = function succ(str) {                                                                                 // 623\n  return adjacent(str, -1);                                                                                           // 624\n};                                                                                                                    // 625\n                                                                                                                      // 626\n},{\"./helper/adjacent\":16}],38:[function(_dereq_,module,exports){                                                     // 627\n/**                                                                                                                   // 628\n * _s.prune: a more elegant version of truncate                                                                       // 629\n * prune extra chars, never leaving a half-chopped word.                                                              // 630\n * @author github.com/rwz                                                                                             // 631\n */                                                                                                                   // 632\nvar makeString = _dereq_('./helper/makeString');                                                                      // 633\nvar rtrim = _dereq_('./rtrim');                                                                                       // 634\n                                                                                                                      // 635\nmodule.exports = function prune(str, length, pruneStr) {                                                              // 636\n  str = makeString(str);                                                                                              // 637\n  length = ~~length;                                                                                                  // 638\n  pruneStr = pruneStr != null ? String(pruneStr) : '...';                                                             // 639\n                                                                                                                      // 640\n  if (str.length <= length) return str;                                                                               // 641\n                                                                                                                      // 642\n  var tmpl = function(c) {                                                                                            // 643\n    return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' ';                                                           // 644\n  },                                                                                                                  // 645\n    template = str.slice(0, length + 1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'           // 646\n                                                                                                                      // 647\n  if (template.slice(template.length - 2).match(/\\w\\w/))                                                              // 648\n    template = template.replace(/\\s*\\S+$/, '');                                                                       // 649\n  else                                                                                                                // 650\n    template = rtrim(template.slice(0, template.length - 1));                                                         // 651\n                                                                                                                      // 652\n  return (template + pruneStr).length > str.length ? str : str.slice(0, template.length) + pruneStr;                  // 653\n};                                                                                                                    // 654\n                                                                                                                      // 655\n},{\"./helper/makeString\":21,\"./rtrim\":44}],39:[function(_dereq_,module,exports){                                      // 656\nvar surround = _dereq_('./surround');                                                                                 // 657\n                                                                                                                      // 658\nmodule.exports = function quote(str, quoteChar) {                                                                     // 659\n  return surround(str, quoteChar || '\"');                                                                             // 660\n};                                                                                                                    // 661\n                                                                                                                      // 662\n},{\"./surround\":55}],40:[function(_dereq_,module,exports){                                                            // 663\nvar makeString = _dereq_('./helper/makeString');                                                                      // 664\nvar strRepeat = _dereq_('./helper/strRepeat');                                                                        // 665\n                                                                                                                      // 666\nmodule.exports = function repeat(str, qty, separator) {                                                               // 667\n  str = makeString(str);                                                                                              // 668\n                                                                                                                      // 669\n  qty = ~~qty;                                                                                                        // 670\n                                                                                                                      // 671\n  // using faster implementation if separator is not needed;                                                          // 672\n  if (separator == null) return strRepeat(str, qty);                                                                  // 673\n                                                                                                                      // 674\n  // this one is about 300x slower in Google Chrome                                                                   // 675\n  for (var repeat = []; qty > 0; repeat[--qty] = str) {}                                                              // 676\n  return repeat.join(separator);                                                                                      // 677\n};                                                                                                                    // 678\n                                                                                                                      // 679\n},{\"./helper/makeString\":21,\"./helper/strRepeat\":22}],41:[function(_dereq_,module,exports){                           // 680\nvar makeString = _dereq_('./helper/makeString');                                                                      // 681\n                                                                                                                      // 682\nmodule.exports = function replaceAll(str, find, replace, ignorecase) {                                                // 683\n  var flags = (ignorecase === true)?'gi':'g';                                                                         // 684\n  var reg = new RegExp(find, flags);                                                                                  // 685\n                                                                                                                      // 686\n  return makeString(str).replace(reg, replace);                                                                       // 687\n};                                                                                                                    // 688\n                                                                                                                      // 689\n},{\"./helper/makeString\":21}],42:[function(_dereq_,module,exports){                                                   // 690\nvar chars = _dereq_('./chars');                                                                                       // 691\n                                                                                                                      // 692\nmodule.exports = function reverse(str) {                                                                              // 693\n  return chars(str).reverse().join('');                                                                               // 694\n};                                                                                                                    // 695\n                                                                                                                      // 696\n},{\"./chars\":3}],43:[function(_dereq_,module,exports){                                                                // 697\nvar pad = _dereq_('./pad');                                                                                           // 698\n                                                                                                                      // 699\nmodule.exports = function rpad(str, length, padStr) {                                                                 // 700\n  return pad(str, length, padStr, 'right');                                                                           // 701\n};                                                                                                                    // 702\n                                                                                                                      // 703\n},{\"./pad\":36}],44:[function(_dereq_,module,exports){                                                                 // 704\nvar makeString = _dereq_('./helper/makeString');                                                                      // 705\nvar defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');                                                    // 706\nvar nativeTrimRight = String.prototype.trimRight;                                                                     // 707\n                                                                                                                      // 708\nmodule.exports = function rtrim(str, characters) {                                                                    // 709\n  str = makeString(str);                                                                                              // 710\n  if (!characters && nativeTrimRight) return nativeTrimRight.call(str);                                               // 711\n  characters = defaultToWhiteSpace(characters);                                                                       // 712\n  return str.replace(new RegExp(characters + '+$'), '');                                                              // 713\n};                                                                                                                    // 714\n                                                                                                                      // 715\n},{\"./helper/defaultToWhiteSpace\":17,\"./helper/makeString\":21}],45:[function(_dereq_,module,exports){                 // 716\nvar makeString = _dereq_('./helper/makeString');                                                                      // 717\nvar defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');                                                    // 718\nvar trim = _dereq_('./trim');                                                                                         // 719\nvar dasherize = _dereq_('./dasherize');                                                                               // 720\nvar cleanDiacritics = _dereq_(\"./cleanDiacritics\");                                                                   // 721\n                                                                                                                      // 722\nmodule.exports = function slugify(str) {                                                                              // 723\n  return trim(dasherize(cleanDiacritics(str).replace(/[^\\w\\s-]/g, '-')), '-');                                        // 724\n};                                                                                                                    // 725\n                                                                                                                      // 726\n},{\"./cleanDiacritics\":7,\"./dasherize\":9,\"./helper/defaultToWhiteSpace\":17,\"./helper/makeString\":21,\"./trim\":62}],46:[function(_dereq_,module,exports){\nvar chars = _dereq_('./chars');                                                                                       // 728\n                                                                                                                      // 729\nmodule.exports = function splice(str, i, howmany, substr) {                                                           // 730\n  var arr = chars(str);                                                                                               // 731\n  arr.splice(~~i, ~~howmany, substr);                                                                                 // 732\n  return arr.join('');                                                                                                // 733\n};                                                                                                                    // 734\n                                                                                                                      // 735\n},{\"./chars\":3}],47:[function(_dereq_,module,exports){                                                                // 736\n// sprintf() for JavaScript 0.7-beta1                                                                                 // 737\n// http://www.diveintojavascript.com/projects/javascript-sprintf                                                      // 738\n//                                                                                                                    // 739\n// Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>                                               // 740\n// All rights reserved.                                                                                               // 741\nvar strRepeat = _dereq_('./helper/strRepeat');                                                                        // 742\nvar toString = Object.prototype.toString;                                                                             // 743\nvar sprintf = (function() {                                                                                           // 744\n  function get_type(variable) {                                                                                       // 745\n    return toString.call(variable).slice(8, -1).toLowerCase();                                                        // 746\n  }                                                                                                                   // 747\n                                                                                                                      // 748\n  var str_repeat = strRepeat;                                                                                         // 749\n                                                                                                                      // 750\n  var str_format = function() {                                                                                       // 751\n    if (!str_format.cache.hasOwnProperty(arguments[0])) {                                                             // 752\n      str_format.cache[arguments[0]] = str_format.parse(arguments[0]);                                                // 753\n    }                                                                                                                 // 754\n    return str_format.format.call(null, str_format.cache[arguments[0]], arguments);                                   // 755\n  };                                                                                                                  // 756\n                                                                                                                      // 757\n  str_format.format = function(parse_tree, argv) {                                                                    // 758\n    var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n    for (i = 0; i < tree_length; i++) {                                                                               // 760\n      node_type = get_type(parse_tree[i]);                                                                            // 761\n      if (node_type === 'string') {                                                                                   // 762\n        output.push(parse_tree[i]);                                                                                   // 763\n      }                                                                                                               // 764\n      else if (node_type === 'array') {                                                                               // 765\n        match = parse_tree[i]; // convenience purposes only                                                           // 766\n        if (match[2]) { // keyword argument                                                                           // 767\n          arg = argv[cursor];                                                                                         // 768\n          for (k = 0; k < match[2].length; k++) {                                                                     // 769\n            if (!arg.hasOwnProperty(match[2][k])) {                                                                   // 770\n              throw new Error(sprintf('[_.sprintf] property \"%s\" does not exist', match[2][k]));                      // 771\n            }                                                                                                         // 772\n            arg = arg[match[2][k]];                                                                                   // 773\n          }                                                                                                           // 774\n        } else if (match[1]) { // positional argument (explicit)                                                      // 775\n          arg = argv[match[1]];                                                                                       // 776\n        }                                                                                                             // 777\n        else { // positional argument (implicit)                                                                      // 778\n          arg = argv[cursor++];                                                                                       // 779\n        }                                                                                                             // 780\n                                                                                                                      // 781\n        if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {                                                   // 782\n          throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));                       // 783\n        }                                                                                                             // 784\n        switch (match[8]) {                                                                                           // 785\n          case 'b': arg = arg.toString(2); break;                                                                     // 786\n          case 'c': arg = String.fromCharCode(arg); break;                                                            // 787\n          case 'd': arg = parseInt(arg, 10); break;                                                                   // 788\n          case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;                        // 789\n          case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;                      // 790\n          case 'o': arg = arg.toString(8); break;                                                                     // 791\n          case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;                // 792\n          case 'u': arg = Math.abs(arg); break;                                                                       // 793\n          case 'x': arg = arg.toString(16); break;                                                                    // 794\n          case 'X': arg = arg.toString(16).toUpperCase(); break;                                                      // 795\n        }                                                                                                             // 796\n        arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);                                      // 797\n        pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';                                  // 798\n        pad_length = match[6] - String(arg).length;                                                                   // 799\n        pad = match[6] ? str_repeat(pad_character, pad_length) : '';                                                  // 800\n        output.push(match[5] ? arg + pad : pad + arg);                                                                // 801\n      }                                                                                                               // 802\n    }                                                                                                                 // 803\n    return output.join('');                                                                                           // 804\n  };                                                                                                                  // 805\n                                                                                                                      // 806\n  str_format.cache = {};                                                                                              // 807\n                                                                                                                      // 808\n  str_format.parse = function(fmt) {                                                                                  // 809\n    var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;                                                       // 810\n    while (_fmt) {                                                                                                    // 811\n      if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {                                                                // 812\n        parse_tree.push(match[0]);                                                                                    // 813\n      }                                                                                                               // 814\n      else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {                                                            // 815\n        parse_tree.push('%');                                                                                         // 816\n      }                                                                                                               // 817\n      else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n        if (match[2]) {                                                                                               // 819\n          arg_names |= 1;                                                                                             // 820\n          var field_list = [], replacement_field = match[2], field_match = [];                                        // 821\n          if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                               // 822\n            field_list.push(field_match[1]);                                                                          // 823\n            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {                 // 824\n              if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {                         // 825\n                field_list.push(field_match[1]);                                                                      // 826\n              }                                                                                                       // 827\n              else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {                               // 828\n                field_list.push(field_match[1]);                                                                      // 829\n              }                                                                                                       // 830\n              else {                                                                                                  // 831\n                throw new Error('[_.sprintf] huh?');                                                                  // 832\n              }                                                                                                       // 833\n            }                                                                                                         // 834\n          }                                                                                                           // 835\n          else {                                                                                                      // 836\n            throw new Error('[_.sprintf] huh?');                                                                      // 837\n          }                                                                                                           // 838\n          match[2] = field_list;                                                                                      // 839\n        }                                                                                                             // 840\n        else {                                                                                                        // 841\n          arg_names |= 2;                                                                                             // 842\n        }                                                                                                             // 843\n        if (arg_names === 3) {                                                                                        // 844\n          throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');             // 845\n        }                                                                                                             // 846\n        parse_tree.push(match);                                                                                       // 847\n      }                                                                                                               // 848\n      else {                                                                                                          // 849\n        throw new Error('[_.sprintf] huh?');                                                                          // 850\n      }                                                                                                               // 851\n      _fmt = _fmt.substring(match[0].length);                                                                         // 852\n    }                                                                                                                 // 853\n    return parse_tree;                                                                                                // 854\n  };                                                                                                                  // 855\n                                                                                                                      // 856\n  return str_format;                                                                                                  // 857\n})();                                                                                                                 // 858\n                                                                                                                      // 859\nmodule.exports = sprintf;                                                                                             // 860\n                                                                                                                      // 861\n},{\"./helper/strRepeat\":22}],48:[function(_dereq_,module,exports){                                                    // 862\nvar makeString = _dereq_('./helper/makeString');                                                                      // 863\nvar toPositive = _dereq_('./helper/toPositive');                                                                      // 864\n                                                                                                                      // 865\nmodule.exports = function startsWith(str, starts, position) {                                                         // 866\n  str = makeString(str);                                                                                              // 867\n  starts = '' + starts;                                                                                               // 868\n  position = position == null ? 0 : Math.min(toPositive(position), str.length);                                       // 869\n  return str.lastIndexOf(starts, position) === position;                                                              // 870\n};                                                                                                                    // 871\n                                                                                                                      // 872\n},{\"./helper/makeString\":21,\"./helper/toPositive\":23}],49:[function(_dereq_,module,exports){                          // 873\nvar makeString = _dereq_('./helper/makeString');                                                                      // 874\n                                                                                                                      // 875\nmodule.exports = function strLeft(str, sep) {                                                                         // 876\n  str = makeString(str);                                                                                              // 877\n  sep = makeString(sep);                                                                                              // 878\n  var pos = !sep ? -1 : str.indexOf(sep);                                                                             // 879\n  return~ pos ? str.slice(0, pos) : str;                                                                              // 880\n};                                                                                                                    // 881\n                                                                                                                      // 882\n},{\"./helper/makeString\":21}],50:[function(_dereq_,module,exports){                                                   // 883\nvar makeString = _dereq_('./helper/makeString');                                                                      // 884\n                                                                                                                      // 885\nmodule.exports = function strLeftBack(str, sep) {                                                                     // 886\n  str = makeString(str);                                                                                              // 887\n  sep = makeString(sep);                                                                                              // 888\n  var pos = str.lastIndexOf(sep);                                                                                     // 889\n  return~ pos ? str.slice(0, pos) : str;                                                                              // 890\n};                                                                                                                    // 891\n                                                                                                                      // 892\n},{\"./helper/makeString\":21}],51:[function(_dereq_,module,exports){                                                   // 893\nvar makeString = _dereq_('./helper/makeString');                                                                      // 894\n                                                                                                                      // 895\nmodule.exports = function strRight(str, sep) {                                                                        // 896\n  str = makeString(str);                                                                                              // 897\n  sep = makeString(sep);                                                                                              // 898\n  var pos = !sep ? -1 : str.indexOf(sep);                                                                             // 899\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;                                                        // 900\n};                                                                                                                    // 901\n                                                                                                                      // 902\n},{\"./helper/makeString\":21}],52:[function(_dereq_,module,exports){                                                   // 903\nvar makeString = _dereq_('./helper/makeString');                                                                      // 904\n                                                                                                                      // 905\nmodule.exports = function strRightBack(str, sep) {                                                                    // 906\n  str = makeString(str);                                                                                              // 907\n  sep = makeString(sep);                                                                                              // 908\n  var pos = !sep ? -1 : str.lastIndexOf(sep);                                                                         // 909\n  return~ pos ? str.slice(pos + sep.length, str.length) : str;                                                        // 910\n};                                                                                                                    // 911\n                                                                                                                      // 912\n},{\"./helper/makeString\":21}],53:[function(_dereq_,module,exports){                                                   // 913\nvar makeString = _dereq_('./helper/makeString');                                                                      // 914\n                                                                                                                      // 915\nmodule.exports = function stripTags(str) {                                                                            // 916\n  return makeString(str).replace(/<\\/?[^>]+>/g, '');                                                                  // 917\n};                                                                                                                    // 918\n                                                                                                                      // 919\n},{\"./helper/makeString\":21}],54:[function(_dereq_,module,exports){                                                   // 920\nvar adjacent = _dereq_('./helper/adjacent');                                                                          // 921\n                                                                                                                      // 922\nmodule.exports = function succ(str) {                                                                                 // 923\n  return adjacent(str, 1);                                                                                            // 924\n};                                                                                                                    // 925\n                                                                                                                      // 926\n},{\"./helper/adjacent\":16}],55:[function(_dereq_,module,exports){                                                     // 927\nmodule.exports = function surround(str, wrapper) {                                                                    // 928\n  return [wrapper, str, wrapper].join('');                                                                            // 929\n};                                                                                                                    // 930\n                                                                                                                      // 931\n},{}],56:[function(_dereq_,module,exports){                                                                           // 932\nvar makeString = _dereq_('./helper/makeString');                                                                      // 933\n                                                                                                                      // 934\nmodule.exports = function swapCase(str) {                                                                             // 935\n  return makeString(str).replace(/\\S/g, function(c) {                                                                 // 936\n    return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();                                                 // 937\n  });                                                                                                                 // 938\n};                                                                                                                    // 939\n                                                                                                                      // 940\n},{\"./helper/makeString\":21}],57:[function(_dereq_,module,exports){                                                   // 941\nvar makeString = _dereq_('./helper/makeString');                                                                      // 942\n                                                                                                                      // 943\nmodule.exports = function titleize(str) {                                                                             // 944\n  return makeString(str).toLowerCase().replace(/(?:^|\\s|-)\\S/g, function(c) {                                         // 945\n    return c.toUpperCase();                                                                                           // 946\n  });                                                                                                                 // 947\n};                                                                                                                    // 948\n                                                                                                                      // 949\n},{\"./helper/makeString\":21}],58:[function(_dereq_,module,exports){                                                   // 950\nvar trim = _dereq_('./trim');                                                                                         // 951\n                                                                                                                      // 952\nfunction boolMatch(s, matchers) {                                                                                     // 953\n  var i, matcher, down = s.toLowerCase();                                                                             // 954\n  matchers = [].concat(matchers);                                                                                     // 955\n  for (i = 0; i < matchers.length; i += 1) {                                                                          // 956\n    matcher = matchers[i];                                                                                            // 957\n    if (!matcher) continue;                                                                                           // 958\n    if (matcher.test && matcher.test(s)) return true;                                                                 // 959\n    if (matcher.toLowerCase() === down) return true;                                                                  // 960\n  }                                                                                                                   // 961\n}                                                                                                                     // 962\n                                                                                                                      // 963\nmodule.exports = function toBoolean(str, trueValues, falseValues) {                                                   // 964\n  if (typeof str === \"number\") str = \"\" + str;                                                                        // 965\n  if (typeof str !== \"string\") return !!str;                                                                          // 966\n  str = trim(str);                                                                                                    // 967\n  if (boolMatch(str, trueValues || [\"true\", \"1\"])) return true;                                                       // 968\n  if (boolMatch(str, falseValues || [\"false\", \"0\"])) return false;                                                    // 969\n};                                                                                                                    // 970\n                                                                                                                      // 971\n},{\"./trim\":62}],59:[function(_dereq_,module,exports){                                                                // 972\nvar trim = _dereq_('./trim');                                                                                         // 973\n                                                                                                                      // 974\nmodule.exports = function toNumber(num, precision) {                                                                  // 975\n  if (num == null) return 0;                                                                                          // 976\n  var factor = Math.pow(10, isFinite(precision) ? precision : 0);                                                     // 977\n  return Math.round(num * factor) / factor;                                                                           // 978\n};                                                                                                                    // 979\n                                                                                                                      // 980\n},{\"./trim\":62}],60:[function(_dereq_,module,exports){                                                                // 981\nvar rtrim = _dereq_('./rtrim');                                                                                       // 982\n                                                                                                                      // 983\nmodule.exports = function toSentence(array, separator, lastSeparator, serial) {                                       // 984\n  separator = separator || ', ';                                                                                      // 985\n  lastSeparator = lastSeparator || ' and ';                                                                           // 986\n  var a = array.slice(),                                                                                              // 987\n    lastMember = a.pop();                                                                                             // 988\n                                                                                                                      // 989\n  if (array.length > 2 && serial) lastSeparator = rtrim(separator) + lastSeparator;                                   // 990\n                                                                                                                      // 991\n  return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;                                      // 992\n};                                                                                                                    // 993\n                                                                                                                      // 994\n},{\"./rtrim\":44}],61:[function(_dereq_,module,exports){                                                               // 995\nvar toSentence = _dereq_('./toSentence');                                                                             // 996\n                                                                                                                      // 997\nmodule.exports = function toSentenceSerial(array, sep, lastSep) {                                                     // 998\n  return toSentence(array, sep, lastSep, true);                                                                       // 999\n};                                                                                                                    // 1000\n                                                                                                                      // 1001\n},{\"./toSentence\":60}],62:[function(_dereq_,module,exports){                                                          // 1002\nvar makeString = _dereq_('./helper/makeString');                                                                      // 1003\nvar defaultToWhiteSpace = _dereq_('./helper/defaultToWhiteSpace');                                                    // 1004\nvar nativeTrim = String.prototype.trim;                                                                               // 1005\n                                                                                                                      // 1006\nmodule.exports = function trim(str, characters) {                                                                     // 1007\n  str = makeString(str);                                                                                              // 1008\n  if (!characters && nativeTrim) return nativeTrim.call(str);                                                         // 1009\n  characters = defaultToWhiteSpace(characters);                                                                       // 1010\n  return str.replace(new RegExp('^' + characters + '+|' + characters + '+$', 'g'), '');                               // 1011\n};                                                                                                                    // 1012\n                                                                                                                      // 1013\n},{\"./helper/defaultToWhiteSpace\":17,\"./helper/makeString\":21}],63:[function(_dereq_,module,exports){                 // 1014\nvar makeString = _dereq_('./helper/makeString');                                                                      // 1015\n                                                                                                                      // 1016\nmodule.exports = function truncate(str, length, truncateStr) {                                                        // 1017\n  str = makeString(str);                                                                                              // 1018\n  truncateStr = truncateStr || '...';                                                                                 // 1019\n  length = ~~length;                                                                                                  // 1020\n  return str.length > length ? str.slice(0, length) + truncateStr : str;                                              // 1021\n};                                                                                                                    // 1022\n                                                                                                                      // 1023\n},{\"./helper/makeString\":21}],64:[function(_dereq_,module,exports){                                                   // 1024\nvar trim = _dereq_('./trim');                                                                                         // 1025\n                                                                                                                      // 1026\nmodule.exports = function underscored(str) {                                                                          // 1027\n  return trim(str).replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();                      // 1028\n};                                                                                                                    // 1029\n                                                                                                                      // 1030\n},{\"./trim\":62}],65:[function(_dereq_,module,exports){                                                                // 1031\nvar makeString = _dereq_('./helper/makeString');                                                                      // 1032\nvar htmlEntities = _dereq_('./helper/htmlEntities');                                                                  // 1033\n                                                                                                                      // 1034\nmodule.exports = function unescapeHTML(str) {                                                                         // 1035\n  return makeString(str).replace(/\\&([^;]+);/g, function(entity, entityCode) {                                        // 1036\n    var match;                                                                                                        // 1037\n                                                                                                                      // 1038\n    if (entityCode in htmlEntities) {                                                                                 // 1039\n      return htmlEntities[entityCode];                                                                                // 1040\n    } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                                       // 1041\n      return String.fromCharCode(parseInt(match[1], 16));                                                             // 1042\n    } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                                // 1043\n      return String.fromCharCode(~~match[1]);                                                                         // 1044\n    } else {                                                                                                          // 1045\n      return entity;                                                                                                  // 1046\n    }                                                                                                                 // 1047\n  });                                                                                                                 // 1048\n};                                                                                                                    // 1049\n                                                                                                                      // 1050\n},{\"./helper/htmlEntities\":20,\"./helper/makeString\":21}],66:[function(_dereq_,module,exports){                        // 1051\nmodule.exports = function unquote(str, quoteChar) {                                                                   // 1052\n  quoteChar = quoteChar || '\"';                                                                                       // 1053\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar)                                                      // 1054\n    return str.slice(1, str.length - 1);                                                                              // 1055\n  else return str;                                                                                                    // 1056\n};                                                                                                                    // 1057\n                                                                                                                      // 1058\n},{}],67:[function(_dereq_,module,exports){                                                                           // 1059\nvar sprintf = _dereq_('./sprintf');                                                                                   // 1060\n                                                                                                                      // 1061\nmodule.exports = function vsprintf(fmt, argv) {                                                                       // 1062\n  argv.unshift(fmt);                                                                                                  // 1063\n  return sprintf.apply(null, argv);                                                                                   // 1064\n};                                                                                                                    // 1065\n                                                                                                                      // 1066\n},{\"./sprintf\":47}],68:[function(_dereq_,module,exports){                                                             // 1067\nvar isBlank = _dereq_('./isBlank');                                                                                   // 1068\nvar trim = _dereq_('./trim');                                                                                         // 1069\n                                                                                                                      // 1070\nmodule.exports = function words(str, delimiter) {                                                                     // 1071\n  if (isBlank(str)) return [];                                                                                        // 1072\n  return trim(str, delimiter).split(delimiter || /\\s+/);                                                              // 1073\n};                                                                                                                    // 1074\n                                                                                                                      // 1075\n},{\"./isBlank\":27,\"./trim\":62}],69:[function(_dereq_,module,exports){                                                 // 1076\n// Wrap                                                                                                               // 1077\n// wraps a string by a certain width                                                                                  // 1078\n                                                                                                                      // 1079\nmakeString = _dereq_('./helper/makeString');                                                                          // 1080\n                                                                                                                      // 1081\nmodule.exports = function wrap(str, options){                                                                         // 1082\n\tstr = makeString(str);                                                                                               // 1083\n                                                                                                                      // 1084\n\toptions = options || {};                                                                                             // 1085\n                                                                                                                      // 1086\n\twidth = options.width || 75;                                                                                         // 1087\n\tseperator = options.seperator || '\\n';                                                                               // 1088\n\tcut = options.cut || false;                                                                                          // 1089\n\tpreserveSpaces = options.preserveSpaces || false;                                                                    // 1090\n\ttrailingSpaces = options.trailingSpaces || false;                                                                    // 1091\n                                                                                                                      // 1092\n\tif(width <= 0){                                                                                                      // 1093\n\t\treturn str;                                                                                                         // 1094\n\t}                                                                                                                    // 1095\n                                                                                                                      // 1096\n\telse if(!cut){                                                                                                       // 1097\n                                                                                                                      // 1098\n\t\twords = str.split(\" \");                                                                                             // 1099\n\t\tresult = \"\";                                                                                                        // 1100\n\t\tcurrent_column = 0;                                                                                                 // 1101\n                                                                                                                      // 1102\n\t\twhile(words.length > 0){                                                                                            // 1103\n\t\t\t                                                                                                                   // 1104\n\t\t\t// if adding a space and the next word would cause this line to be longer than width...                            // 1105\n\t\t\tif(1 + words[0].length + current_column > width){                                                                  // 1106\n\t\t\t\t//start a new line if this line is not already empty                                                              // 1107\n\t\t\t\tif(current_column > 0){                                                                                           // 1108\n\t\t\t\t\t// add a space at the end of the line is preserveSpaces is true                                                  // 1109\n\t\t\t\t\tif (preserveSpaces){                                                                                             // 1110\n\t\t\t\t\t\tresult += ' ';                                                                                                  // 1111\n\t\t\t\t\t\tcurrent_column++;                                                                                               // 1112\n\t\t\t\t\t}                                                                                                                // 1113\n\t\t\t\t\t// fill the rest of the line with spaces if trailingSpaces option is true                                        // 1114\n\t\t\t\t\telse if(trailingSpaces){                                                                                         // 1115\n\t\t\t\t\t\twhile(current_column < width){                                                                                  // 1116\n\t\t\t\t\t\t\tresult += ' ';                                                                                                 // 1117\n\t\t\t\t\t\t\tcurrent_column++;                                                                                              // 1118\n\t\t\t\t\t\t}\t\t\t\t\t\t                                                                                                         // 1119\n\t\t\t\t\t}                                                                                                                // 1120\n\t\t\t\t\t//start new line                                                                                                 // 1121\n\t\t\t\t\tresult += seperator;                                                                                             // 1122\n\t\t\t\t\tcurrent_column = 0;                                                                                              // 1123\n\t\t\t\t}                                                                                                                 // 1124\n\t\t\t}                                                                                                                  // 1125\n                                                                                                                      // 1126\n\t\t\t// if not at the begining of the line, add a space in front of the word                                            // 1127\n\t\t\tif(current_column > 0){                                                                                            // 1128\n\t\t\t\tresult += \" \";                                                                                                    // 1129\n\t\t\t\tcurrent_column++;                                                                                                 // 1130\n\t\t\t}                                                                                                                  // 1131\n                                                                                                                      // 1132\n\t\t\t// tack on the next word, update current column, a pop words array                                                 // 1133\n\t\t\tresult += words[0];                                                                                                // 1134\n\t\t\tcurrent_column += words[0].length;                                                                                 // 1135\n\t\t\twords.shift();                                                                                                     // 1136\n                                                                                                                      // 1137\n\t\t}                                                                                                                   // 1138\n                                                                                                                      // 1139\n\t\t// fill the rest of the line with spaces if trailingSpaces option is true                                           // 1140\n\t\tif(trailingSpaces){                                                                                                 // 1141\n\t\t\twhile(current_column < width){                                                                                     // 1142\n\t\t\t\tresult += ' ';                                                                                                    // 1143\n\t\t\t\tcurrent_column++;                                                                                                 // 1144\n\t\t\t}\t\t\t\t\t\t                                                                                                            // 1145\n\t\t}                                                                                                                   // 1146\n                                                                                                                      // 1147\n\t\treturn result;                                                                                                      // 1148\n                                                                                                                      // 1149\n\t}                                                                                                                    // 1150\n                                                                                                                      // 1151\n\telse {                                                                                                               // 1152\n                                                                                                                      // 1153\n\t\tindex = 0;                                                                                                          // 1154\n\t\tresult = \"\";                                                                                                        // 1155\n                                                                                                                      // 1156\n\t\t// walk through each character and add seperators where appropriate                                                 // 1157\n\t\twhile(index < str.length){                                                                                          // 1158\n\t\t\tif(index % width == 0 && index > 0){                                                                               // 1159\n\t\t\t\tresult += seperator;                                                                                              // 1160\n\t\t\t}                                                                                                                  // 1161\n\t\t\tresult += str.charAt(index);                                                                                       // 1162\n\t\t\tindex++;                                                                                                           // 1163\n\t\t}                                                                                                                   // 1164\n                                                                                                                      // 1165\n\t\t// fill the rest of the line with spaces if trailingSpaces option is true                                           // 1166\n\t\tif(trailingSpaces){                                                                                                 // 1167\n\t\t\twhile(index % width > 0){                                                                                          // 1168\n\t\t\t\tresult += ' ';                                                                                                    // 1169\n\t\t\t\tindex++;                                                                                                          // 1170\n\t\t\t}\t\t\t\t\t\t                                                                                                            // 1171\n\t\t}                                                                                                                   // 1172\n\t\t                                                                                                                    // 1173\n\t\treturn result;                                                                                                      // 1174\n\t}                                                                                                                    // 1175\n};                                                                                                                    // 1176\n},{\"./helper/makeString\":21}]},{},[15])                                                                               // 1177\n(15)                                                                                                                  // 1178\n});                                                                                                                   // 1179\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/underscorestring:underscore.string/meteor-post.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// s will be picked up by Meteor and exported                                                                         // 1\ns = module.exports;                                                                                                   // 2\n                                                                                                                      // 3\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}